#!/usr/bin/env node

//
// Please install nodejs binary in your system exec dir, like /usr/bin/ or /usr/local/bin/
//
var util = require('util'),
    fs = require('fs'),
    argv = require('optimist').argv,
    naclcert = require('../nacl-cert'),
    nacl = require('tweetnacl/nacl-fast.js');

var help = [
    "usage: nacl-cert [options] ",
    "",
    "NACL cert utility",
    "",
    "options:",
    "  -m, --mode      genca/gencert/genkeypair/validateca/validatecert    Generate or validate cer, MUST",
    "  -n  --names     domain name                Domain names separated by ,",
    "  -i  --ips       ip                         IPs separated by ,",
    "  -d  --days      duration days              Cert duration, Days",
    "  -p  --publickey box public key             NACL box publicKey filepath to sign or cert to validate",
    "  -c  --ca        ca cert/secretkey          CA cert[secretkey] filepath used to generate/validate cert",

    "  -u, --user      USER                       User to drop privileges once server socket is bound, Optional",
    "  -h, --help                                 You're staring at it"
].join('\n');

if (argv.h || argv.help) {
  return util.puts(help);
}

var   mode = argv.m || argv.mode,
   	  name = argv.n || argv.name,
	  days = argv.d || argv.days,
	  pk   = argv.p || argv.publickey,
	  ips  = argv.i || argv.ips,
	capath = argv.c || argv.ca,
	  user = argv.u || argv.user;

// generate cert
if (mode.match(/genca/gi)) {
	// gen CA
	if (!name) {
		util.puts(help);
		throw new Error('Please add name -n');
	}
	if (!days) {
		util.puts(help);
		throw new Error('Please add days -d');
	}
	
	var caname = name.split(',')[0];
	var cadesc = {
			name: caname,
			tte: new Date().getTime() + days*24*3600000
	};

	var ca = naclcert.generateCA(cadesc);
	if (ca) {
		console.log('Generate CA success as :\n'+JSON.stringify(ca));
		var cacertfile = caname+'-ca-cert.json';
		var caskeyfile = caname+'-ca-key.json';

		fs.writeFileSync(cacertfile, JSON.stringify(ca.cert));
		console.log('\nWrite CA cert to '+cacertfile);
		fs.writeFileSync(caskeyfile, JSON.stringify(ca));
		console.log('\nWrite CA key to '+caskeyfile);
	} else {
		util.puts(help);
		throw new Error('Generate CA failed');
	}
} else if (mode.match(/gencert/gi)) {
	// gen Cert sign by CA
	var certnames = name.split(',') || ['unknown'];
	var certdesc = {
			version: '1.0',
			type: 'ca',
			tte: new Date().getTime() + days*24*3600000,
			publickey: JSON.parse(fs.readFileSync(pk).toString()).publickey,
			names: certnames,
			ips: ips.split(',') || []
	};
	var caobj = JSON.parse(fs.readFileSync(capath).toString());

	var cert = naclcert.generate(certdesc, caobj.secretkey, caobj.cert);
	if (cert) {
		console.log('Generate Cert success as :\n'+JSON.stringify(cert));
		var certfile = certnames[0]+'-cert.json';

		fs.writeFileSync(certfile, JSON.stringify(cert));
		console.log('\nWrite Cert to '+certfile);
	} else {
		util.puts(help);
		throw new Error('Generate Cert failed');
	}
} else if (mode.match(/genkey/gi)) {
	var bkp = nacl.box.keyPair();
		
	fs.writeFile('box-kp.json', JSON.stringify({
		secretkey: naclcert.Uint8ToArray(bkp.secretKey),
	    publickey: naclcert.Uint8ToArray(bkp.publicKey),
	}));
	console.log('Write NACL/Box keypair to box-kp.json\n');
} else if (mode.match(/validateca/gi)) {
	var cacertobj = JSON.parse(fs.readFileSync(capath).toString());
	
	if (naclcert.validate(cacertobj)) {
		console.log('Validate CA success');
	} else {
		util.puts(help);
		throw new Error('Validate CA failed');
	}
} else if (mode.match(/validatecert/gi)) {
	var cacertobj = JSON.parse(fs.readFileSync(capath).toString());
	var certobj = JSON.parse(fs.readFileSync(pk).toString());

	if (naclcert.validate(certobj, cacertobj)) {
		console.log('Validate Cert success');
	} else {
		util.puts(help);
		throw new Error('Validate Cert failed');
	}
} else {
	util.puts(help);
	throw new Error('Invalid operation mode');
}

//
// Drop privileges if requested
//
if (typeof user === 'string') {
    process.setuid(user);
}

